dist: trusty
language: cpp
sudo: required

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise
    packages:
      - g++-4.8
      - clang-3.8
      - libeigen3-dev
      - libpng-dev
      - libjpeg8-dev
      - libtiff4-dev
      - libtbb-dev
      - libatlas-base-dev
      - libboost-atomic1.55-dev
      - libboost-chrono1.55-dev
      - libboost-filesystem1.55-dev
      - libboost-date-time1.55-dev
      - libboost-program-options1.55-dev
      - libboost-serialization1.55-dev
      - libboost-system1.55-dev
      - libboost-test1.55-dev
      - libboost-thread1.55-dev
      - libboost-timer1.55-dev

matrix:
  include:
    - compiler: gcc
      env: CXX_COMPILER=g++-4.8 C_COMPILER=gcc-4.8 TOOLSET=gcc WITH_CUDA=ON CUDA_VERSION_MAJOR="7" CUDA_VERSION_MINOR="0" CUDA_PKG_LONGVERSION="${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}-28" CUDA_PKG_VERSION="${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR}"
    - compiler: gcc
      env: CXX_COMPILER=g++-4.8 C_COMPILER=gcc-4.8 TOOLSET=gcc WITH_CUDA=ON CUDA_VERSION_MAJOR="7" CUDA_VERSION_MINOR="5" CUDA_PKG_LONGVERSION="${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}-18" CUDA_PKG_VERSION="${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR}"
    - compiler: gcc
      env: CXX_COMPILER=g++-4.8 C_COMPILER=gcc-4.8 TOOLSET=gcc WITH_CUDA=ON CUDA_VERSION_MAJOR="8" CUDA_VERSION_MINOR="0" CUDA_PKG_LONGVERSION="${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}.61-1" CUDA_PKG_VERSION="${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR}"
    - compiler: gcc
      env: CXX_COMPILER=g++-4.8 C_COMPILER=gcc-4.8 TOOLSET=gcc WITH_CUDA=OFF
    - compiler: clang
      # clang 3.8 is  supported in cuda >= 8.0
      env: CXX_COMPILER=clang++-3.8 C_COMPILER=clang-3.8 TOOLSET=clang WITH_CUDA=ON CUDA_VERSION_MAJOR="8" CUDA_VERSION_MINOR="0" CUDA_PKG_LONGVERSION="${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}.61-1" CUDA_PKG_VERSION="${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR}"
    - compiler: clang
      env: CXX_COMPILER=clang++-3.8 C_COMPILER=clang-3.8 TOOLSET=clang WITH_CUDA=OFF


env:
  global:
    - NUM_CPU="`grep processor /proc/cpuinfo | wc -l`"; echo $NUM_CPU
    - BUILD_TYPE="RELEASE"
    - BUILD_SYSTEM="`uname -s`"
    - BUILD_PROCESSOR="`uname -p`"
    - CCTAG_SOURCE=${TRAVIS_BUILD_DIR}
    - CCTAG_BUILD=${TRAVIS_BUILD_DIR}/build
    - CCTAG_INSTALL=${CCTAG_BUILD}/install
    - CCTAG_BUILD_VARIANT=${TRAVIS_BUILD_DIR}/build
    - CCTAG_INSTALL_VARIANT=${CCTAG_BUILD_VARIANT}/install
    - CCTAG_SOURCE_APP=$CCTAG_SOURCE/src/applications
    - CCTAG_BUILD_APP=${CCTAG_SOURCE_APP}/build
    # OPENCV
    - OPENCV_ROOT=${HOME}/opencv3
    - OPENCV_SOURCE=${OPENCV_ROOT}/source
    - OPENCV_CONTRIB=${OPENCV_ROOT}/contrib
    - OPENCV_BUILD=${OPENCV_ROOT}/build
    - OPENCV_INSTALL=${OPENCV_ROOT}/install
    # CMAKE
    - CMAKE_URL="https://cmake.org/files/v3.6/cmake-3.6.1-Linux-x86_64.tar.gz"
    - CMAKE_ROOT=${HOME}/cmake
    - CMAKE_SOURCE=${CMAKE_ROOT}/source
    - CMAKE_INSTALL=${CMAKE_ROOT}/install

before_install:
 - gem install coveralls-lcov
 # OPENCV
 - >
    if [ "$(ls -A $OPENCV_INSTALL)" ]; then
      echo "OpenCV found in cache.";
    else
      mkdir --parent $OPENCV_SOURCE
      mkdir --parent $OPENCV_BUILD
      mkdir --parent $OPENCV_INSTALL
      git clone --recursive --branch 3.0.0 --depth 1 https://github.com/Itseez/opencv.git $OPENCV_SOURCE;
    fi
 # CMAKE most recent version
 - >
    if [ "$(ls -A ${CMAKE_INSTALL})" ]; then
      echo "CMake found in cache.";
      ls -A ${CMAKE_INSTALL}
      export PATH=${CMAKE_INSTALL}/bin:${PATH};
      cmake --version
    else
      mkdir --parent ${CMAKE_SOURCE}
      mkdir --parent ${CMAKE_INSTALL}
      ls -A ${CMAKE_INSTALL}
      travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${CMAKE_INSTALL}
      export PATH=${CMAKE_INSTALL}/bin:${PATH};
      cmake --version
    fi

install:
  # CUDA (only if needed)
  - >
     if [ "${WITH_CUDA}" = "ON" ]; then
       CUDA_REPO_PKG=cuda-repo-ubuntu1404_${CUDA_PKG_LONGVERSION}_amd64.deb
       wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/$CUDA_REPO_PKG
       sudo dpkg -i $CUDA_REPO_PKG
       rm $CUDA_REPO_PKG
       sudo apt-get -y update
       sudo apt-get install -y --no-install-recommends  cuda-core-$CUDA_PKG_VERSION  cuda-cudart-dev-$CUDA_PKG_VERSION  cuda-cublas-dev-$CUDA_PKG_VERSION cuda-curand-dev-$CUDA_PKG_VERSION
       sudo ln -s /usr/local/cuda-${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR} /usr/local/cuda
     fi
  # OPENCV
  - >
     if [ ! "$(ls -A $OPENCV_INSTALL)" ]; then
       cd $OPENCV_BUILD
       cmake \
         -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
         -DCMAKE_C_COMPILER=$C_COMPILER \
         -DCMAKE_BUILD_TYPE=Release \
         -DCMAKE_INSTALL_PREFIX=$OPENCV_INSTALL \
         -DWITH_CUDA=OFF \
         -DBUILD_opencv_ts=0 \
         $OPENCV_SOURCE;
       make -j 2 > null;
       make install;
     fi

before_script:
  # patch tbb
  # https://software.intel.com/en-us/forums/intel-threading-building-blocks/topic/431422
  - sudo sed -i '345s/.*/\#if \(__GNUC__==4 \&\& __GNUC_MINOR__>=4 \&\& __GXX_EXPERIMENTAL_CXX0X__\) || __clang_major__ >= 3/' /usr/include/tbb/pipeline.h
  # Create build folder
  - mkdir --parent $CCTAG_BUILD
  - cd $CCTAG_BUILD
  # Classic release build
  - >
     cmake \
       -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
       -DCMAKE_C_COMPILER=$C_COMPILER \
       -DCMAKE_INSTALL_PREFIX:PATH=$CCTAG_INSTALL \
       -DWITH_CUDA:BOOL=$WITH_CUDA \
       -DCMAKE_BUILD_TYPE:BOOL=$BUILD_TYPE \
       -DOpenCV_DIR:PATH=$OPENCV_INSTALL/share/OpenCV \
       . $CCTAG_SOURCE

script:
  # classic make install
  - make install -j 2 VERBOSE=1
  - make test

  # Test if it compiles as third party
  - cd $CCTAG_SOURCE_APP
  - mkdir --parent $CCTAG_BUILD_APP
  - cd $CCTAG_BUILD_APP
  - >
     cmake -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
       -DCMAKE_C_COMPILER=$C_COMPILER \
       -DCCTag_DIR:PATH=/$CCTAG_INSTALL/lib/cmake/CCTag/ \
       -DOpenCV_DIR:PATH=$OPENCV_INSTALL/share/OpenCV \
       -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/install \
       . $CCTAG_SOURCE_APP
  - make install -j 2 VERBOSE=1

  # For builds without cuda test also another variant with
  # VISUAL_DEBUG and CCTAG_SERIALIZE
  - >
     if [ "${WITH_CUDA}" = "OFF" ]; then
        mkdir --parent $CCTAG_BUILD_VARIANT
        cd $CCTAG_BUILD_VARIANT
        cmake \
         -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
         -DCMAKE_C_COMPILER=$C_COMPILER \
         -DCMAKE_INSTALL_PREFIX:PATH=$CCTAG_INSTALL_VARIANT \
         -DWITH_CUDA:BOOL=$WITH_CUDA \
         -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
         -DVISUAL_DEBUG:BOOL=ON \
         -DCCTAG_SERIALIZE:BOOL=ON \
         -DOpenCV_DIR:PATH=$OPENCV_INSTALL/share/OpenCV \
         . $CCTAG_SOURCE
        make install -j 2 VERBOSE=1
        make test
     fi

after_success:
  - du -hs $OPENCV_INSTALL

# Before uploading the new cache archive
before_cache:
  - ccache -s

cache:
  ccache: true

  directories:
    - $OPENCV_INSTALL
    - $CMAKE_INSTALL
